public interface Shape {
     public double area();
}
public class Circle implements Shape {
    private double radius;

    Circle(double radius){
        this.radius=radius;

    }
    @Override
    public double area() {
        return 3.14* radius*radius;
    }
}
public class Rectangle implements Shape {
    private double length;
    private double width;

    Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }
    @Override
    public double area() {

        return length * width;
    }
}
public class Triangle implements Shape {
    private double base;
    private double height;

    Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    @Override
    public double area() {
        return  0.5 * base * height ;
    }
}
public class CalculateAreas {
    public static double[] Area(Shape[] shapes) {
        double[] s = new double[shapes.length];
        for (int i = 0; i < shapes.length; i++) {
            if (shapes[i] != null) {
                s[i] = shapes[i].area();
            }
        }
        return s;
    }
}
public class AreaRunner {
    public static void main(String[] args) {
        Shape[] shapes = new Shape[3];
        shapes[0] = new Circle(12);
        shapes[1] = new Rectangle(12, 2);
        shapes[2] = new Triangle(12, 2);

        double CalAreas[] = CalculateAreas.Area(shapes);
        for (double area : CalAreas) {
            System.out.println(area);
        }
    }
}
